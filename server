import express from 'express';
import multer from 'multer';
import path from 'path';
import dotenv from 'dotenv';
import axios from 'axios';
import fs from 'fs';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';

dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// Initialize SQLite database
const dbPromise = open({
  filename: 'media.db',
  driver: sqlite3.Database
});

// Create media table if it doesn't exist
const initDb = async () => {
  const db = await dbPromise;
  await db.run(`
    CREATE TABLE IF NOT EXISTS media (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      url TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
};
initDb();

// Configure storage for multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/'); // Directory to store uploaded files
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname)); // Unique file name
  }
});

const upload = multer({ storage });

// API endpoint for uploading media
app.post('/upload', async (req, res) => {
  try {
    let fileUrl;

    if (req.body.imageUrl) {
      // If an image or video URL is provided
      const response = await axios.get(req.body.imageUrl, { responseType: 'stream' });
      const fileName = `uploads/${Date.now()}-${path.basename(req.body.imageUrl)}`;
      const writer = fs.createWriteStream(fileName);
      response.data.pipe(writer);
      writer.on('finish', async () => {
        fileUrl = `${req.protocol}://${req.get('host')}/uploads/${path.basename(fileName)}`;
        // Store the URL in SQLite
        const db = await dbPromise;
        await db.run('INSERT INTO media (url) VALUES (?)', [fileUrl]);
        res.json({ url: fileUrl });
      });
      writer.on('error', () => {
        res.status(500).json({ error: 'Error saving the media' });
      });
    } else if (req.file) {
      // If a file is uploaded
      fileUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;
      // Store the URL in SQLite
      const db = await dbPromise;
      await db.run('INSERT INTO media (url) VALUES (?)', [fileUrl]);
      res.json({ url: fileUrl });
    } else {
      return res.status(400).json({ error: 'No file or image/video URL provided' });
    }
  } catch (error) {
    console.error('Error uploading file:', error);
    res.status(500).json({ error: 'Error uploading file' });
  }
});

// Serve uploaded files
app.use('/uploads', express.static('uploads'));

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
